name: Build RecipeBox Android App with Advanced Signing

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web assets
        run: |
          mkdir -p dist
          cp index.html style.css script.js manifest.json sw.js dist/

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ÁΩ≤Âêç‰ªò„ÅçAPKÁîüÊàê„Å®„Ç¢„Ç§„Ç≥„É≥ÁΩÆÊèõ„Ç∑„Çπ„ÉÜ„É†
      - name: Build Signed APK with Custom Icon
        if: secrets.KEYSTORE_FILE
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          NEW_VERSION_CODE: ${{ github.run_number }}
        run: |
          chmod +x gradlew
          
          # „Ç≠„Éº„Çπ„Éà„Ç¢Âæ©ÂÖÉ
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > recipebox-release-key.p12
          
          # ÁΩ≤Âêç‰ªò„Åç„É™„É™„Éº„ÇπAPKÁîüÊàê
          ./gradlew assembleRelease --no-daemon --stacktrace
          
          # RecipeBox„Ç´„Çπ„Çø„É†„Ç¢„Ç§„Ç≥„É≥‰ΩúÊàê
          mkdir -p $RUNNER_TEMP/icons
          
          # „Ç´„Çπ„Çø„É†„Ç¢„Ç§„Ç≥„É≥„ÇíPNGÂΩ¢Âºè„Åß‰ΩúÊàêÔºà„É¨„Ç∑„Éî„Éñ„ÉÉ„ÇØ„Éá„Ç∂„Ç§„É≥Ôºâ
          cat > $RUNNER_TEMP/create_icon.py << 'EOF'
          from PIL import Image, ImageDraw, ImageFont
          import os
          
          def create_recipe_icon(size, output_path):
              # ËÉåÊôØËâ≤ÔºöÊ∏©„Åã„Åø„ÅÆ„ÅÇ„Çã„Ç™„É¨„É≥„Ç∏
              bg_color = "#FF8C00"  # DarkOrange
              
              # ÁîªÂÉè‰ΩúÊàê
              img = Image.new('RGB', (size, size), bg_color)
              draw = ImageDraw.Draw(img)
              
              # Êú¨„ÅÆ„Ç¢„Ç¶„Éà„É©„Ç§„É≥
              margin = size * 0.15
              book_left = margin
              book_right = size - margin
              book_top = margin * 0.8
              book_bottom = size - margin * 0.8
              
              # Êú¨„ÅÆËÉåÊôØÔºàÁôΩÔºâ
              draw.rectangle([book_left, book_top, book_right, book_bottom], 
                           fill="#FFFFFF", outline="#8B4513", width=max(2, size//64))
              
              # „Éö„Éº„Ç∏„É©„Ç§„É≥
              line_spacing = (book_bottom - book_top) * 0.15
              for i in range(3):
                  y = book_top + line_spacing * (i + 2)
                  draw.line([book_left + margin*0.3, y, book_right - margin*0.3, y], 
                           fill="#CCCCCC", width=max(1, size//128))
              
              # Ë™øÁêÜÂô®ÂÖ∑„Ç¢„Ç§„Ç≥„É≥Ôºà„Éï„Ç©„Éº„ÇØÔºÜ„Éä„Ç§„ÉïÈ¢®Ôºâ
              center_x, center_y = size // 2, size // 2
              utensil_size = size * 0.15
              
              # „Éï„Ç©„Éº„ÇØÔºàÂ∑¶Ôºâ
              fork_x = center_x - utensil_size * 0.7
              draw.line([fork_x, center_y - utensil_size, fork_x, center_y + utensil_size], 
                       fill="#8B4513", width=max(3, size//32))
              draw.line([fork_x - utensil_size*0.3, center_y - utensil_size*0.8, 
                        fork_x + utensil_size*0.3, center_y - utensil_size*0.8], 
                       fill="#8B4513", width=max(2, size//48))
              
              # „Éä„Ç§„ÉïÔºàÂè≥Ôºâ
              knife_x = center_x + utensil_size * 0.7
              draw.line([knife_x, center_y - utensil_size, knife_x, center_y + utensil_size], 
                       fill="#8B4513", width=max(3, size//32))
              
              # Ëßí‰∏∏Âá¶ÁêÜ„ÅÆ„Åü„ÇÅ„ÅÆÂÜçÊèèÁîª
              mask = Image.new('L', (size, size), 0)
              mask_draw = ImageDraw.Draw(mask)
              corner_radius = size // 8
              mask_draw.rounded_rectangle([0, 0, size, size], corner_radius, fill=255)
              
              # Ëßí‰∏∏ÈÅ©Áî®
              result = Image.new('RGBA', (size, size), (0, 0, 0, 0))
              result.paste(img, (0, 0))
              result.putalpha(mask)
              
              result.save(output_path, 'PNG')
              print(f"Created icon: {output_path} ({size}x{size})")
          
          # ÂêÑ„Çµ„Ç§„Ç∫„ÅÆ„Ç¢„Ç§„Ç≥„É≥ÁîüÊàê
          sizes = [48, 72, 96, 144, 192, 384, 512, 1024]
          for size in sizes:
              create_recipe_icon(size, f"/tmp/recipe_icon_{size}.png")
          EOF
          
          # PythonÁí∞Â¢ÉÁ¢∫Ë™ç„Å®„Ç¢„Ç§„Ç≥„É≥ÁîüÊàê
          if command -v python3 >/dev/null 2>&1; then
              python3 -m pip install --user Pillow >/dev/null 2>&1 || true
              python3 $RUNNER_TEMP/create_icon.py || echo "Icon generation failed, using default"
          else
              echo "Python not available, using default icons"
          fi
          
          # APK„Ç¢„Ç§„Ç≥„É≥ÁΩÆÊèõÔºàÁÑ°ÂúßÁ∏ÆÂÜç„Éë„ÉÉ„Ç±„Éº„Ç∏ÊñπÂºèÔºâ
          original_apk="app/build/outputs/apk/release/app-release.apk"
          
          if [ -f "$original_apk" ] && [ -f "/tmp/recipe_icon_192.png" ]; then
              echo "üé® Replacing APK icons with custom RecipeBox icon..."
              
              # APKÂ±ïÈñã
              mkdir -p $RUNNER_TEMP/apk_extract
              cd $RUNNER_TEMP/apk_extract
              unzip -q "$GITHUB_WORKSPACE/android/$original_apk"
              
              # „Ç¢„Ç§„Ç≥„É≥ÁΩÆÊèõ
              for dir in res/mipmap-*; do
                  if [ -d "$dir" ]; then
                      # Âü∫Êú¨„Ç¢„Ç§„Ç≥„É≥
                      cp /tmp/recipe_icon_192.png "$dir/ic_launcher.png" 2>/dev/null || true
                      cp /tmp/recipe_icon_192.png "$dir/ic_launcher_round.png" 2>/dev/null || true
                      cp /tmp/recipe_icon_192.png "$dir/ic_launcher_foreground.png" 2>/dev/null || true
                      echo "Updated icons in $dir"
                  fi
              done
              
              # ÁΩ≤ÂêçÂâäÈô§
              rm -rf META-INF
              
              # ÁÑ°ÂúßÁ∏ÆÂÜç„Éë„ÉÉ„Ç±„Éº„Ç∏ÔºàÈáçË¶ÅÔºöCRC‰øùÊåÅÔºâ
              zip -r -0 $RUNNER_TEMP/modified.apk . >/dev/null
              
              # APKÊßãÈÄ†Ë®∫Êñ≠
              if command -v aapt2 >/dev/null 2>&1; then
                  echo "üîç APK Structure Diagnostic:"
                  if aapt2 dump badging $RUNNER_TEMP/modified.apk > /tmp/aapt_output.txt 2>&1; then
                      echo "‚úÖ APK structure valid"
                      grep "application-label:" /tmp/aapt_output.txt || true
                      grep "application-icon-" /tmp/aapt_output.txt || true
                  else
                      echo "‚ùå APK structure problems detected"
                      head -5 /tmp/aapt_output.txt || true
                  fi
              fi
              
              # Zipalign + ÁΩ≤Âêç
              if command -v zipalign >/dev/null 2>&1 && command -v apksigner >/dev/null 2>&1; then
                  zipalign -p -f 4 $RUNNER_TEMP/modified.apk $RUNNER_TEMP/aligned.apk
                  
                  # Ëá™Âãï„Ç®„Ç§„É™„Ç¢„ÇπÊ§úÂá∫
                  KEY_ALIAS_DETECTED=$(keytool -list -keystore recipebox-release-key.p12 -storetype PKCS12 -storepass "$KEYSTORE_PASSWORD" 2>/dev/null | grep "Alias name:" | head -1 | cut -d: -f2 | xargs)
                  FINAL_ALIAS="${KEY_ALIAS:-$KEY_ALIAS_DETECTED}"
                  
                  echo "üîê Signing APK with alias: $FINAL_ALIAS"
                  apksigner sign --ks recipebox-release-key.p12 \
                    --ks-pass pass:"$KEYSTORE_PASSWORD" \
                    --key-pass pass:"$KEYSTORE_PASSWORD" \
                    --ks-key-alias "$FINAL_ALIAS" \
                    --v1-signing-enabled true \
                    --v2-signing-enabled true \
                    --v3-signing-enabled true \
                    --out $RUNNER_TEMP/final.apk $RUNNER_TEMP/aligned.apk
                  
                  # ÁΩ≤ÂêçÊ§úË®º
                  if apksigner verify $RUNNER_TEMP/final.apk; then
                      echo "‚úÖ APK signature verification successful"
                      cp $RUNNER_TEMP/final.apk "$GITHUB_WORKSPACE/android/app/build/outputs/apk/release/app-release.apk"
                  else
                      echo "‚ùå APK signature verification failed, using original"
                  fi
              else
                  echo "‚ö†Ô∏è zipalign/apksigner not available, using unaligned APK"
                  cp $RUNNER_TEMP/modified.apk "$GITHUB_WORKSPACE/android/app/build/outputs/apk/release/app-release.apk"
              fi
              
              cd "$GITHUB_WORKSPACE/android"
          else
              echo "‚ö†Ô∏è Original APK or custom icon not found, proceeding with original APK"
          fi

      # Debug APKÔºàÁΩ≤Âêç„Å™„ÅóÔºâ
      - name: Build Debug APK
        if: ${{ !secrets.KEYSTORE_FILE }}
        working-directory: android
        run: |
          chmod +x gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RecipeBox-v${{ github.run_number }}.apk
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: RecipeBox v${{ github.run_number }}
          files: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk
          body: |
            üç≥ **RecipeBox v${{ github.run_number }} - Your Cooking Companion**
            
            **New in this version:**
            - üé® Custom RecipeBox icon (recipe book design)
            - üîß Enhanced APK update compatibility
            - üì± Seamless app updates without uninstall/reinstall
            - üîê Advanced APK signing (v1+v2+v3 signatures)
            
            **Features:**
            - üìñ Comprehensive Recipe Collection (50+ recipes)
            - üßÆ Salt Concentration Calculator  
            - ‚öñÔ∏è Container Weight Database
            - üì± Mobile-Optimized Interface
            - üîÑ Ingredient Scaling (1-4 servings)
            - üéØ One-tap recipe access
            
            **Installation:**
            1. Download the APK file below
            2. Enable "Install from Unknown Sources" in Android settings  
            3. Install the APK
            4. **Updates:** Future versions will install over this one seamlessly
            
            **Download Options:**
            - `app-release.apk`: Signed production build (recommended)
            - `app-debug.apk`: Debug build (fallback)
            
            **Version Info:**
            - Version Code: ${{ github.run_number }}
            - Build: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}