name: Build PWA APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # ========== 1. 環境セットアップフェーズ ==========
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # ========== 2. 依存関係インストールフェーズ ==========
    - name: Install Dependencies
      run: |
        echo "📦 依存関係インストール開始"
        npm ci
        npm install -g @capacitor/cli
        # CI環境でのみ@capacitor/assetsをインストール (Sharp依存関係がCI環境で利用可能)
        npm install @capacitor/assets@^3.0.5
        echo "✅ 依存関係インストール完了"

    - name: Run Lint and Format Check
      env:
        ESLINT_USE_FLAT_CONFIG: true
      run: |
        npm run lint
        npm run format -- --check

    # ========== 3. ウェブアセット構築フェーズ ==========
    - name: Validate PWA Assets
      run: |
        echo "🔍 PWA設定ファイル確認"
        if [ -f "manifest.json" ]; then
          echo "✅ manifest.json 存在確認"
          cat manifest.json | jq '.' > /dev/null && echo "✅ JSON形式正常" || exit 1
        else
          echo "❌ manifest.json が見つかりません"
          exit 1
        fi
        
        if [ -f "sw.js" ]; then
          echo "✅ Service Worker存在確認"
        else
          echo "⚠️ Service Workerがありません（オプション）"
        fi

    - name: Generate Version Tag
      id: version
      run: |
        VERSION_TAG="1.0.${{ github.run_number }}"
        echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
        echo "🏷️ バージョンタグ: ${VERSION_TAG}"

    - name: Update App Version
      run: |
        echo "📝 アプリバージョン更新開始"
        # package.jsonのバージョン更新
        jq --arg version "${{ env.VERSION_TAG }}" '.version = $version' package.json > package.json.tmp
        mv package.json.tmp package.json
        
        # manifestのバージョン更新
        jq --arg version "${{ env.VERSION_TAG }}" '.version = $version' manifest.json > manifest.json.tmp
        mv manifest.json.tmp manifest.json
        
        echo "✅ バージョン ${{ env.VERSION_TAG }} に更新完了"

    - name: Setup Keystore from GitHub Secrets
      run: |
        echo "🔑 キーストア設定開始"
        
        if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "⚠️ GitHub Secrets未設定 - PWAテンプレート固定キーストア生成"
          keytool -genkeypair -v \
            -keystore template-release.keystore \
            -alias pwa-template-key \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=PWA Template,OU=PWA Template,O=PWA Template App,L=Tokyo,ST=Tokyo,C=JP" \
            -storepass template2024 \
            -keypass template2024
          
          echo "KEYSTORE_PASSWORD=template2024" >> $GITHUB_ENV
          echo "KEY_ALIAS=pwa-template-key" >> $GITHUB_ENV
          echo "KEY_PASSWORD=template2024" >> $GITHUB_ENV
        else
          echo "✅ GitHub Secrets設定済み - 本番キーストア使用"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > your-app-release-keystore.jks
          
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
        fi
        
        echo "🔐 キーストア設定完了"

    # ========== 4. Capacitor初期化フェーズ ==========
    - name: Build Web Assets and Prepare Capacitor
      run: |
        echo "🏧️ ウェブアセットビルド開始"
        
        # distディレクトリ作成とファイルコピー
        mkdir -p dist
        cp index.html style.css script.js manifest.json sw.js dist/
        
        echo "✅ ウェブアセット準備完了"

    - name: Initialize and Sync Capacitor Project
      run: |
        echo "🔄 Capacitor同期開始"
        npx cap sync android
        echo "✅ Capacitor同期完了"

    - name: Generate App Icons and Splash Screens (Capacitor Assets)
      run: |
        echo "🎨 Androidアダプティブアイコン生成開始 (Capacitor公式ツール)"
        
        # Capacitor公式アセットツールでアダプティブアイコン生成
        npx @capacitor/assets generate --android
        
        # 生成結果確認
        echo "✅ アダプティブアイコン生成完了! 生成ファイル:"
        find android/app/src/main/res -name "*ic_launcher*" -o -name "*adaptive*" | sort
        
        # アダプティブアイコン仕様確認
        if [ -d "android/app/src/main/res/mipmap-anydpi-v26" ]; then
          echo "✅ Android 8.0+ アダプティブアイコン対応完了"
          ls -la android/app/src/main/res/mipmap-anydpi-v26/
        else
          echo "⚠️ アダプティブアイコンディレクトリが生成されていません"
        fi

    # ========== 5. Android APKビルドフェーズ ==========
    - name: Build Android APK
      run: |
        echo "🏧️ Android APK ビルド開始"
        cd android
        
        # Gradleラッパーに実行権限付与
        chmod +x ./gradlew
        
        # APKビルド
        ./gradlew assembleRelease --stacktrace
        
        echo "✅ APK ビルド完了"

    - name: Sign APK with apksigner
      id: sign_apk
      env:
        KEYSTORE_PASSWORD: ${{ env.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ env.KEY_ALIAS }}
        KEY_PASSWORD: ${{ env.KEY_PASSWORD }}
        VERSION_TAG: ${{ env.VERSION_TAG }}
      run: |
        echo "✍️ APK署名開始 (Modern apksigner with Dynamic Keystore Detection)"
        
        cd android/app/build/outputs/apk/release
        
        # 最新のAndroid build-toolsのパスを取得
        BUILD_TOOLS_PATH=$(ls -d $ANDROID_HOME/build-tools/* | sort -r | head -n 1)
        echo "🔧 使用build-tools: $BUILD_TOOLS_PATH"
        
        # 動的キーストアファイル検出システム（RecipeBox方式）
        if [ -f "../../../../../../your-app-release-keystore.jks" ]; then
          KEYSTORE_FILE="../../../../../../your-app-release-keystore.jks"
          echo "🔑 本番キーストア使用: your-app-release-keystore.jks"
        elif [ -f "../../../../../../template-release.keystore" ]; then
          KEYSTORE_FILE="../../../../../../template-release.keystore"
          echo "🔑 フォールバックキーストア使用: template-release.keystore"
        else
          echo "❌ キーストアファイルが見つかりません"
          ls -la ../../../../../../*.keystore ../../../../../../*.jks 2>/dev/null || echo "キーストアファイルが存在しません"
          exit 1
        fi
        
        echo "🔑 使用キーストア: $KEYSTORE_FILE"
        
        # APK署名 (signature scheme v2対応)
        $BUILD_TOOLS_PATH/apksigner sign \
          --ks "$KEYSTORE_FILE" \
          --ks-key-alias "$KEY_ALIAS" \
          --ks-pass env:KEYSTORE_PASSWORD \
          --key-pass env:KEY_PASSWORD \
          --out pwa-app_$VERSION_TAG.apk \
          app-release-unsigned.apk
        
        # 署名検証
        $BUILD_TOOLS_PATH/apksigner verify pwa-app_$VERSION_TAG.apk
        
        echo "🎯 署名完了 (v2対応): pwa-app_$VERSION_TAG.apk"

    - name: Verify APK
      run: |
        echo "🔍 APK検証開始"
        
        APK_PATH="android/app/build/outputs/apk/release/pwa-app_${{ env.VERSION_TAG }}.apk"
        
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "✅ APK生成成功: $APK_SIZE"
          
          # APK情報表示
          $ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools | tail -1)/aapt dump badging "$APK_PATH" | head -5
        else
          echo "❌ APK生成失敗"
          exit 1
        fi

    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: PWA-APP-APK-${{ env.VERSION_TAG }}
        path: android/app/build/outputs/apk/release/pwa-app_${{ env.VERSION_TAG }}.apk
        retention-days: 30

    - name: Create Release (on main branch)
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION_TAG }}
        release_name: PWA App v${{ env.VERSION_TAG }}
        body: |
          ## 📱 PWA App APK v${{ env.VERSION_TAG }}
          
          ### ✨ アプリ機能
          - 📱 PWA (Progressive Web App) 対応
          - 💾 オフライン動作
          - 🔄 自動更新機能
          - 📱 ネイティブアプリ風UI/UX
          - 🚀 高速起動
          
          ### 🛠️ 開発環境
          - Node.js ${{ env.NODE_VERSION }}
          - Java JDK ${{ env.JAVA_VERSION }}
          - Capacitor 7.x
          - GitHub Actions自動ビルド
          
          ### 📋 使用方法
          1. APKをダウンロード
          2. Android端末にインストール
          3. PWAアプリを利用開始
          
          **APKファイル**: PWA-APP-APK-${{ env.VERSION_TAG }}
        draft: false
        prerelease: false

    - name: Build Summary
      run: |
        echo "## 🎯 PWA App APK Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 項目 | 値 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| バージョン | ${{ env.VERSION_TAG }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js | ${{ env.NODE_VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Java JDK | ${{ env.JAVA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ブランチ | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| コミット | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 成果物" >> $GITHUB_STEP_SUMMARY
        echo "- APKファイル: \`pwa-app_${{ env.VERSION_TAG }}.apk\`" >> $GITHUB_STEP_SUMMARY
        echo "- アーティファクト: PWA-APP-APK-${{ env.VERSION_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **PWA App APKビルドが正常に完了しました！**" >> $GITHUB_STEP_SUMMARY

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}